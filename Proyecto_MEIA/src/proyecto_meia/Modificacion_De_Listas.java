/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proyecto_meia;

import java.awt.Color;
import java.awt.Image;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 *
 * @author josue
 */
public class Modificacion_De_Listas extends javax.swing.JFrame {

    /**
     * Creates new form Modificacion_De_Listas
     */
    
    static String NombreLista;
    static String Usuario;
    static String Rol;
    Procesos Acceso = new Procesos();
    static int ContadorListaIndizada;
    static String Comienzo;
      
    public Modificacion_De_Listas(String Dato, String Usuario, String Rol) throws IOException {
        
        NombreLista = Dato.trim();
        this.Rol = Rol;
        this.Usuario = Usuario;
        String Cadena = "Lista: "+NombreLista;
        initComponents();
        lblLista.setText(Cadena);
        LlenarComboBox();
        BuscarListas(Usuario,Rol);
    }
    
     public Modificacion_De_Listas() {
     
     }
  
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        btnRegresar = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        lblLista = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstUsuariosLista = new javax.swing.JList<>();
        ComboBoxUsuarios = new javax.swing.JComboBox<>();
        btnAgregar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnBuscar = new javax.swing.JButton();
        txtNombreUsuario = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Calibri Light", 1, 36)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Modificacion de Listas");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 60, 440, -1));

        btnRegresar.setFont(new java.awt.Font("Calibri Light", 1, 13)); // NOI18N
        btnRegresar.setText("Regresar");
        getContentPane().add(btnRegresar, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 455, 120, 30));

        lblLista.setFont(new java.awt.Font("Calibri Light", 1, 16)); // NOI18N
        lblLista.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblLista.setText("Lista: Nombre de la Lista");

        jScrollPane1.setViewportView(lstUsuariosLista);

        ComboBoxUsuarios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboBoxUsuariosActionPerformed(evt);
            }
        });

        btnAgregar.setFont(new java.awt.Font("Calibri Light", 1, 13)); // NOI18N
        btnAgregar.setText("Agregar");
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });

        btnEliminar.setFont(new java.awt.Font("Calibri Light", 1, 13)); // NOI18N
        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnBuscar.setFont(new java.awt.Font("Calibri Light", 1, 13)); // NOI18N
        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        txtNombreUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNombreUsuarioActionPerformed(evt);
            }
        });

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Ingrese el nombre del Usuario a buscar");

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Seleccione un Usuario para agregar a la Lista");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(141, 141, 141)
                        .addComponent(lblLista)
                        .addGap(0, 112, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnEliminar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnAgregar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ComboBoxUsuarios, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnBuscar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtNombreUsuario)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(lblLista)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(6, 6, 6)
                        .addComponent(ComboBoxUsuarios, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEliminar, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                        .addGap(11, 11, 11)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtNombreUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 130, 730, 300));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/proyecto_meia/Fondo1.png"))); // NOI18N
        jLabel1.setText("jLabel1");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 820, 500));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void LlenarComboBox() throws IOException
    {
        Procesos Acceso = new Procesos();
      
        String pathRuta = "C:\\MEIA\\Bitacora_Usuarios.txt";
        File Archivo = new File(pathRuta);
        
        FileReader Lectura = null;
        try 
        {
            Lectura = new FileReader(Archivo);
        } 
        catch (FileNotFoundException ex) 
        {
            Logger.getLogger(Menu_de_Administracion.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        BufferedReader Leer = new BufferedReader(Lectura);
        List<Usuario> ListaUsuarios = new ArrayList<Usuario>();
        SimpleDateFormat formatter = new SimpleDateFormat("EEE MMM dd HH:mm:ss zzz yyyy");
        String Linea = "";
        Linea = Leer.readLine();
        String [] Auxiliar;
        Usuario Nuevo;
        boolean Admin = false;

        while(Linea != null)
        {
            Auxiliar = Linea.split("\\|");
            byte Aux;
            byte Aux2;

            if(Auxiliar[4].equals("1"))
                Aux = 1;
            else
                Aux = 0;

            if(Auxiliar[9].equals("1"))
                Aux2 = 1;
            else
                Aux2 = 0;

            Date Fecha = new Date(Auxiliar[5]);
            Nuevo = new Usuario(Auxiliar[0],Auxiliar[1],Auxiliar[2],Acceso.EliminarCaracteres(Auxiliar[3]),Aux,Fecha,Acceso.EliminarCaracteres(Auxiliar[6]),Integer.parseInt(Auxiliar[7]),Auxiliar[8],Aux2);
            ListaUsuarios.add(Nuevo);

            Linea = Leer.readLine();
        }

        Leer.close();
        Lectura.close();

        String pathRutaU = "C:\\MEIA\\Usuarios.txt";
        File ArchivoU = new File(pathRutaU);
        
        if(ArchivoU.exists())
        {
            FileReader LecturaU = null;
            
            try 
            {
                LecturaU = new FileReader(ArchivoU);
            }
            catch (FileNotFoundException ex) 
            {
                Logger.getLogger(Menu_de_Administracion.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            BufferedReader LeerU = new BufferedReader(LecturaU);
            String LineaU = "";
            LineaU = LeerU.readLine();
            String [] AuxiliarU;
            Nuevo = null;
            Admin = false;

             while(LineaU != null)
            {
                Auxiliar = LineaU.split("\\|");
                byte Aux;
                byte Aux2;

                if(Auxiliar[4].equals("1"))
                    Aux = 1;
                else
                    Aux = 0;

                if(Auxiliar[9].equals("1"))
                    Aux2 = 1;
                else
                    Aux2 = 0;

                Date Fecha = new Date(Auxiliar[5]);
                Nuevo = new Usuario(Auxiliar[0],Auxiliar[1],Auxiliar[2],Acceso.EliminarCaracteres(Auxiliar[3]),Aux,Fecha,Acceso.EliminarCaracteres(Auxiliar[6]),Integer.parseInt(Auxiliar[7]),Auxiliar[8],Aux2);
                ListaUsuarios.add(Nuevo);

                LineaU = LeerU.readLine();
            }
             
            LeerU.close();
            LecturaU.close();
            
        }
        
            for(Usuario item : ListaUsuarios)
                ComboBoxUsuarios.addItem(item.Usuario);
        
    }
    
    //En esta Funcion se Buscan las Listas para llenar La Lista del Menu Principal.
    private void BuscarListas(String Usuario, String Rol) throws FileNotFoundException, IOException
    {
        if(Rol.equals("Administrador"))
        {
            String pathRuta = "C:\\MEIA\\ListaUsuario.txt";
            File Archivo = new File(pathRuta);
            
            if(Archivo.exists())
            {
            FileReader Lectura = new FileReader(Archivo);
            BufferedReader Leer = new BufferedReader(Lectura);
            String Linea = Leer.readLine();
            String[] Auxiliar;
            List<Lista> Listas = new ArrayList<Lista>();
            Lista NuevaLista;
            
            while(Linea != null)
            {
              Auxiliar = Linea.split("\\|"); 
              NuevaLista = new Lista(Auxiliar[0],Auxiliar[1],Auxiliar[2],Auxiliar[3],Auxiliar[4],Auxiliar[5]);
              Listas.add(NuevaLista);
              Linea = Leer.readLine();
            }
            

            DefaultListModel Modelo = new DefaultListModel();
            Modelo.addElement(Acceso.RellenarCaracteres("Nombre Lista:",1)+"|"+Acceso.RellenarCaracteres("Usuario:",0)+"|"+Acceso.RellenarCaracteres("Usuario Asociado:",0)+"|"+Acceso.RellenarCaracteres("Descripcion:",2)+"|"+Acceso.RellenarCaracteres("Fecha de Creacion:",0)+Acceso.RellenarCaracteres("Estatus: ",0));
            for(int i = 0; i< Listas.size(); i++)
            {
                Modelo.addElement(Listas.get(i).Nombre_lista+"|"+Listas.get(i).Usuario+"|"+Listas.get(i).Descripcion+"|"+Listas.get(i).Numero_usuarios+"|"+Listas.get(i).Fecha_creacion+"|"+Listas.get(i).Status);
            }
            lstUsuariosLista.setModel(Modelo);
            }
            
        }else
        {
            String pathRuta = "C:\\MEIA\\ListaUsuario.txt";
            File Archivo = new File(pathRuta);
            if(Archivo.exists())
            {
            FileReader Lectura = new FileReader(Archivo);
            BufferedReader Leer = new BufferedReader(Lectura);
            String Linea = Leer.readLine();
            String[] Auxiliar;
            List<Lista> Listas = new ArrayList<Lista>();
            Lista NuevaLista;
            
            while(Linea != null)
            {
              Auxiliar = Linea.split("\\|"); 
              NuevaLista = new Lista(Auxiliar[0],Auxiliar[1],Auxiliar[2],Auxiliar[3],Auxiliar[4],Auxiliar[5]);
              if(Auxiliar[1].equals(Usuario))
              Listas.add(NuevaLista);
              Linea = Leer.readLine();
            }
            
            
            DefaultListModel Modelo = new DefaultListModel();
            Modelo.addElement("Nombre Lista:    "+ "Usuario:    "+"Usuario Asociado:    "+"Descripcion:    "+"Fecha de Creacion:    "+"Estatus    ");
            for(int i = 0; i< Listas.size(); i++)
            {
                Modelo.addElement(Listas.get(i).Nombre_lista+"|"+Listas.get(i).Usuario+"|"+Listas.get(i).Descripcion+"|"+Listas.get(i).Numero_usuarios+"|"+Listas.get(i).Fecha_creacion+"|"+Listas.get(i).Status);
            }
            lstUsuariosLista.setModel(Modelo);  
            }
        }
    }
    
    //En esta Funcion se Buscan las Listas para llenar La Lista del Menu Principal.
    private boolean ListaExiste(String NombreLista,String Usuario) throws FileNotFoundException, IOException
    {
            String pathRuta = "C:\\MEIA\\ListaUsuario.txt";
            File Archivo = new File(pathRuta);
            boolean Existe = false;
            
            if(Archivo.exists())
            {
            FileReader Lectura = new FileReader(Archivo);
            BufferedReader Leer = new BufferedReader(Lectura);
            String Linea = Leer.readLine();
            String[] Auxiliar;
            
            while(Linea != null)
            {
              Auxiliar = Linea.split("\\|"); 
              if(Auxiliar[1].equals(Usuario) && Auxiliar[0].equals(NombreLista))
              Existe = true;
            }
            
            }
            
            return Existe;
    }
    
    private void txtNombreUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNombreUsuarioActionPerformed
        
        
    }//GEN-LAST:event_txtNombreUsuarioActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
      
        String Nombre = txtNombreUsuario.getText();
        try {
            if(ListaExiste(NombreLista,Nombre) == true)
            {
                JOptionPane.showMessageDialog(this,"El Nombre de Usuario que Busca SI Existe","Aviso",JOptionPane.INFORMATION_MESSAGE);
            }else
            {
                JOptionPane.showMessageDialog(this,"El Nombre de Usuario que Busca NO Existe","Aviso",JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (IOException ex) {
            Logger.getLogger(Listas.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_btnBuscarActionPerformed

    //Se Elimina un Usuario de la Lista y se Actualizan los Descriptores tanto de ListaUsuario como ListaIndizada
    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        
        String Cadena = lstUsuariosLista.getSelectedValue();
        String []ArregloCadena = Cadena.split("\\|");
        String Nombre = ArregloCadena[0];
        String Usuario = ArregloCadena[1];
        Procesos TamañoFijo = new Procesos();
        if(Cadena != "")
        {
        try {
            String pathRuta = "C:\\MEIA\\ListaUsuario.txt";
            File Archivo = new File(pathRuta);
            RandomAccessFile ArchivoSustitucion = new RandomAccessFile(Archivo,"rw");
            String Linea = ArchivoSustitucion.readLine();
            String [] Auxiliar;
         
               
            while(Linea != null)
            {
                Auxiliar = Linea.split("\\|"); 
                if(Auxiliar[0].equals(Nombre) && Auxiliar[1].equals(Usuario))
                {
                    ListaUsuario NuevaLista = new ListaUsuario(TamañoFijo.RellenarCaracteres(ArregloCadena[0], 1),TamañoFijo.RellenarCaracteres(ArregloCadena[1], 0), TamañoFijo.RellenarCaracteres(ArregloCadena[2], 2),ArregloCadena[3], ArregloCadena[4],"0");
                    String Sustitucion = NuevaLista.Nombre_lista+"|"+NuevaLista.Usuario+"|"+NuevaLista.Descripcion+"|"+NuevaLista.Fecha_creacion+"|"+NuevaLista.Status;
                    ArchivoSustitucion.writeBytes(Sustitucion);
                    EliminarListaIndizada(NuevaLista);
                }
                Linea = ArchivoSustitucion.readLine();
            }
            
            DescriptorListaUsuario();
            DescriptorListaIndizada();
           
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Listas.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Listas.class.getName()).log(Level.SEVERE, null, ex);
        }
        }
        {
            JOptionPane.showMessageDialog(this, "No ha seleccionado ningun elemento");
        }
        
    }//GEN-LAST:event_btnEliminarActionPerformed

    //se Agrega un Usuario a la Lista y se Actualizan los Descriptores tanto de ListaUsuario como ListaIndizada
    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
       
        try {
            Date Fecha = new Date();
            String Usuario = ComboBoxUsuarios.getSelectedItem().toString();
            String pathRuta = "C:\\MEIA\\ListaUsuario.txt";
            File Archivo = new File(pathRuta);
            FileWriter Escritor = new FileWriter(Archivo,true);
            BufferedWriter bw = new BufferedWriter(Escritor);
            
            Procesos Proceso = new Procesos();
            Usuario = Proceso.RellenarCaracteres(Usuario, 0);
            NombreLista = Proceso.RellenarCaracteres(NombreLista, 1);
            List<Lista> Registros = new ArrayList<Lista>();
            Registros = ListaRequerida();
            ListaUsuario Nueva;
            String Descripcion = ObtenerDescripcion(NombreLista, this.Usuario);
            
            if(Registros.size() == 0)
            {
             Nueva = new ListaUsuario(Proceso.RellenarCaracteres(NombreLista,1),Proceso.RellenarCaracteres(this.Usuario,0),Proceso.RellenarCaracteres(Usuario,0),Proceso.RellenarCaracteres(Descripcion,2),Fecha.toString(), "1");
             bw.write(Nueva.Nombre_lista+"|"+Nueva.Usuario+"|"+Nueva.Usuario_Asociado+"|"+Nueva.Descripcion+"|"+Nueva.Fecha_creacion+"|"+Nueva.Status);
            }
            else
            {
            Nueva = new ListaUsuario(NombreLista,Proceso.RellenarCaracteres(Registros.get(0).Usuario,0),Usuario,Proceso.RellenarCaracteres(Registros.get(0).Descripcion,2),Registros.get(0).Fecha_creacion, "1");
            bw.write(Nueva.Nombre_lista+"|"+Nueva.Usuario+"|"+Nueva.Usuario_Asociado+"|"+Nueva.Descripcion+"|"+Nueva.Fecha_creacion+"|"+Nueva.Status);
            }
            bw.close();
            Escritor.close();
            DescriptorListaUsuario();
            AgregarListaIndizada(Nueva);
            JOptionPane.showMessageDialog(null, "Usuario Ingresado con Exito");
            BuscarListas(this.Usuario, this.Rol);
            
        } catch (IOException ex) {
            Logger.getLogger(Modificacion_De_Listas.class.getName()).log(Level.SEVERE, null, ex);
        }
            
            
            
            
         
    }//GEN-LAST:event_btnAgregarActionPerformed

    
    private String ObtenerDescripcion(String NombreLista, String Usuario) throws FileNotFoundException, IOException
    {
            NombreLista = NombreLista.trim();
            String pathRuta = "C:\\MEIA\\Lista.txt";
            File Archivo = new File(pathRuta);
            
            FileReader Lectura = new FileReader(Archivo);
            BufferedReader Leer = new BufferedReader(Lectura);
            String Linea = Leer.readLine();
            String[] Auxiliar;
            List<Lista> Listas = new ArrayList<Lista>();
            Lista NuevaLista;
            String Descripcion = "";
            
            while(Linea != null)
            {
              Auxiliar = Linea.split("\\|"); 
              NuevaLista = new Lista(Auxiliar[0],Auxiliar[1],Auxiliar[2],Auxiliar[3],Auxiliar[4],Auxiliar[5]);
              if(NombreLista.equals(Auxiliar[0]) && Usuario.equals(Auxiliar[1]))
              Descripcion = Auxiliar[2];
              Linea = Leer.readLine();
            }
            
            pathRuta = "C:\\MEIA\\Bitacora_Lista.txt";
            Archivo = new File(pathRuta);
            Lectura = new FileReader(Archivo);
            Leer = new BufferedReader(Lectura);
            Linea = Leer.readLine();
            
            while(Linea != null)
            {
              Auxiliar = Linea.split("\\|"); 
              NuevaLista = new Lista(Auxiliar[0],Auxiliar[1],Auxiliar[2],Auxiliar[3],Auxiliar[4],Auxiliar[5]);
              if(NombreLista.equals(Auxiliar[0].trim()) && Usuario.equals(Auxiliar[1].trim()))
              Descripcion = Auxiliar[2];
              Linea = Leer.readLine();
            }
            
            
            return Descripcion.trim();  
    }
   
    //ESTE METODO NO SE UTILIZA
    public void DescriptorBitacoraListaUsuario() throws FileNotFoundException, IOException
    {
        Date Fecha = new Date();
        String path = "C:\\MEIA\\Bitacora_ListaUsuario.txt";
        File Archivo = new File(path);
        FileReader Leer = new FileReader(Archivo);
        BufferedReader leerArchivo = new BufferedReader(Leer);
        String Linea = leerArchivo.readLine();
        int NoRegistros = 0;
        int Activos = 0;
        int Inactivos = 0;        
        
        //Se compara en la posicion 9 porque en esa posicion se encontrara el status a la hora de hacer el split y separarlo.
        while(Linea != null)
        {
            String [] Auxiliar = Linea.split("\\|");
            
            if(Auxiliar[5].equals("1"))
            {
                Activos++;
            }
            else if (Auxiliar[5].equals("0") == true)
            {
                Inactivos++;
            }
            Linea = leerArchivo.readLine();
            NoRegistros++;
        }
        

        Leer.close();
        leerArchivo.close();
        
        
        Descriptor_Bitacora_ListaUsuario Nuevo = new Descriptor_Bitacora_ListaUsuario(NombreLista,Fecha.toString(),Usuario,Fecha.toString(),Usuario,Integer.toString(NoRegistros),Integer.toString(Activos),Integer.toString(Inactivos),"");
        Acceso.DescriptorBitacoraListaUsuario(Nuevo);
    } 
    
    //método donde se crea el Descriptor de Lista y se Actualiza
    public void DescriptorListaUsuario() throws FileNotFoundException, IOException
    {
        Date Fecha = new Date();
        String path = "C:\\MEIA\\ListaUsuario.txt";
        File Archivo = new File(path);
        FileReader Leer = new FileReader(Archivo);
        BufferedReader leerArchivo = new BufferedReader(Leer);
        String Linea = leerArchivo.readLine();
        int NoRegistros = 0;
        int Activos = 0;
        int Inactivos = 0;        
        
        //Se compara en la posicion 9 porque en esa posicion se encontrara el status a la hora de hacer el split y separarlo.
        while(Linea != null)
        {
            String [] Auxiliar = Linea.split("\\|");
            
            if(Auxiliar[5].equals("1"))
            {
                Activos++;
            }
            else if (Auxiliar[5].equals("0") == true)
            {
                Inactivos++;
            }
            Linea = leerArchivo.readLine();
            NoRegistros++;
        }
        

        Leer.close();
        leerArchivo.close();
        
        Descriptor_ListaUsuario Nuevo = new Descriptor_ListaUsuario("Lista Usuario",Fecha.toString(),Usuario,Fecha.toString(),Usuario,Integer.toString(NoRegistros),Integer.toString(Activos),Integer.toString(Inactivos));
        Acceso.DescriptorListaUsuario(Nuevo);
    }
    
    public List ListaRequerida() throws IOException
    {
            String pathRuta = "C:\\MEIA\\ListaUsuario.txt";
            File Archivo = new File(pathRuta);
            
            FileReader Lectura = new FileReader(Archivo);
            BufferedReader Leer = new BufferedReader(Lectura);
            String Linea = Leer.readLine();
            String[] Auxiliar;
            List<Lista> Listas = new ArrayList<Lista>();
            Lista NuevaLista;
            
            while(Linea != null)
            {
              Auxiliar = Linea.split("\\|"); 
              NuevaLista = new Lista(Auxiliar[0],Auxiliar[1],Auxiliar[2],Auxiliar[3],Auxiliar[4],Auxiliar[5]);
              if(NombreLista.equals(Auxiliar[0]) && Usuario.equals(Auxiliar[1]))
              Listas.add(NuevaLista);
              Linea = Leer.readLine();
            }
            
            return Listas;
    }
    
    private void ComboBoxUsuariosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboBoxUsuariosActionPerformed

    }//GEN-LAST:event_ComboBoxUsuariosActionPerformed

    //Cuando se Agregue en ListaUsuarios se debe llamar a Este Metodo en donde se agregara tambien el registro
    //y se actualizara su descriptor, YA LLAMADO
    public void AgregarListaIndizada(ListaUsuario Nueva) throws IOException
    {
            String pathRuta = "C:\\MEIA\\ListaUsuarioIndizada.txt";
            File Archivo = new File(pathRuta);
            FileWriter Escritor = new FileWriter(Archivo,true);
            BufferedWriter bw = new BufferedWriter(Escritor);
            String Posicion = "1"+"."+ContadorListaIndizada;
            ListaIndizada NuevaLista = new ListaIndizada(String.valueOf(ContadorListaIndizada),Posicion,Nueva.Nombre_lista,Nueva.Usuario,Nueva.Usuario_Asociado,"0",Nueva.Status);
            bw.write(NuevaLista.NoRegistro+"|"+NuevaLista.Posicion+"|"+NuevaLista.Nombre_Lista+"|"+NuevaLista.Usuario+"|"+NuevaLista.Usuario_Asociado+"|"+NuevaLista.Siguiente+"|"+NuevaLista.Status);
            AsignarSiguiente();
            bw.close();
            Escritor.close();
            DescriptorListaIndizada();
            ContadorListaIndizada++;
            
            
            
    }
    
    //Reorganiza los Indices y el Siguiente de la ListaIndizada
    private void AsignarSiguiente() throws FileNotFoundException, IOException
    {
            String pathRuta = "C:\\MEIA\\ListaUsuarioIndizada.txt";
            File Archivo = new File(pathRuta);
            FileReader Lector = new FileReader(Archivo);
            BufferedReader bw = new BufferedReader(Lector);
            List<ListaIndizada> Listas = new ArrayList<ListaIndizada>();
            String Linea = bw.readLine();
            String Siguiente = "";
            
            if(Linea == null)
            {
                
                Siguiente = "0";
                Comienzo = "1";
            }
            else
            {
                
                while(Linea != null)
                {
                    String [] Auxiliar = Linea.split("\\|");
                    ListaIndizada Nueva = new ListaIndizada(Auxiliar[0],Auxiliar[1],Auxiliar[2],Auxiliar[3],Auxiliar[4],Auxiliar[5],Auxiliar[6]);
                    Listas.add(Nueva);
                    Linea = bw.readLine();
                }
                Lector.close();
                bw.close();
                
                Collections.sort(Listas, new Comparator<ListaIndizada>(){
                @Override
                public int compare(ListaIndizada p1, ListaIndizada p2) {
		int resultado = p1.Nombre_Lista.compareTo(p2.Nombre_Lista);
                if ( resultado != 0 ) { return resultado;}
                
                resultado = p1.Usuario.compareTo(p2.Usuario);
                if ( resultado != 0 ) { return resultado;}
                
                resultado = p1.Usuario_Asociado.compareTo(p2.Usuario_Asociado);
                if ( resultado != 0 ) { return resultado;}
                
                return resultado;
                }
                });
                
                Comienzo = Listas.get(0).NoRegistro;
                
                for(int i = 0; i<Listas.size();i++)
                {
                    if(Listas.get(i+1).NoRegistro != null)
                    {
                        if(Listas.get(i).Siguiente.equals("0") == false)
                        Listas.get(i).Siguiente = Listas.get(i+1).NoRegistro;
                    }
                    else
                    {
                        Listas.get(i).Siguiente = "0";
                    }
                }
                
                Collections.sort(Listas, new Comparator<ListaIndizada>(){
                @Override
                public int compare(ListaIndizada p1, ListaIndizada p2) {
                return p1.NoRegistro.compareTo(p2.NoRegistro);
                }
                });
                
                FileOutputStream writer = new FileOutputStream(Archivo);
                writer.write(("").getBytes());
                writer.close();     
               
                FileWriter Escritor = new FileWriter(Archivo);
                BufferedWriter bs = new BufferedWriter(Escritor);
                
                for(int i= 0;i<Listas.size();i++)
                {
                    bs.write(Listas.get(i).NoRegistro+"|"+Listas.get(i).Posicion+"|"+Listas.get(i).Nombre_Lista+"|"+Listas.get(i).Usuario+"|"+Listas.get(i).Usuario_Asociado+"|"+Listas.get(i).Siguiente+"|"+Listas.get(i).Status);
                }
                Escritor.close();
                bs.close();

            }
    
    }
    
    //Cuando se Elimine en ListaUsuarios se debe llamar a Este Metodo en donde se agregara tambien el registro
    //y se actualizara su descriptor, YA LLAMADO
    public void EliminarListaIndizada(ListaUsuario Nueva) throws IOException
    {
        
            String pathRuta = "C:\\MEIA\\ListaUsuarioIndizada.txt";
            File Archivo = new File(pathRuta);
            FileReader Lector = new FileReader(Archivo);
            BufferedReader bw = new BufferedReader(Lector);
            String Linea = bw.readLine();
            List<ListaIndizada> Listas = new ArrayList<ListaIndizada>();
           
            
            
            while(Linea != null)
            {
                String[] Auxiliar = Linea.split("\\|");
                if(Auxiliar[2].equals(Nueva.Nombre_lista) && Auxiliar[3].equals(Nueva.Usuario) && Auxiliar[4].equals(Nueva.Usuario_Asociado))
                {
                ListaIndizada Aux = new ListaIndizada(Auxiliar[0],Auxiliar[1],Auxiliar[2],Auxiliar[3],Auxiliar[4],Auxiliar[5],Auxiliar[6]);
                Listas.add(Aux);
                }
                else
                {
                 ListaIndizada Aux = new ListaIndizada(Auxiliar[0],Auxiliar[1],Auxiliar[2],Auxiliar[3],Auxiliar[4], "0","0");   
                 Listas.add(Aux);
                }
                Linea = bw.readLine();
            }

            FileWriter Escritor = new FileWriter(Archivo);
            BufferedWriter bs = new BufferedWriter(Escritor);
            
            for(int i = 0; i<Listas.size();i++)
            {
                bs.write(Listas.get(i).NoRegistro+"|"+Listas.get(i).Posicion+"|"+Listas.get(i).Nombre_Lista+"|"+Listas.get(i).Usuario+"|"+Listas.get(i).Usuario_Asociado+"|"+Listas.get(i).Siguiente+"|"+Listas.get(i).Status);
            }
            bs.close();
            Escritor.close();
            AsignarSiguiente();
            DescriptorListaIndizada();
            bw.close();
            Lector.close();
        
    }
    
    //método donde se crea el Descriptor de Lista y se Actualiza
    public void DescriptorListaIndizada() throws FileNotFoundException, IOException
    {
        Date Fecha = new Date();
        String path = "C:\\MEIA\\ListaUsuarioIndizada.txt";
        File Archivo = new File(path);
        FileReader Leer = new FileReader(Archivo);
        BufferedReader leerArchivo = new BufferedReader(Leer);
        String Linea = leerArchivo.readLine();
        int NoRegistros = 0;
        int Activos = 0;
        int Inactivos = 0;        
        
        //Se compara en la posicion 6 porque en esa posicion se encontrara el status a la hora de hacer el split y separarlo.
        while(Linea != null)
        {
            String [] Auxiliar = Linea.split("\\|");
            
            if(Auxiliar[6].equals("1"))
            {
                Activos++;
            }
            else if (Auxiliar[6].equals("0") == true)
            {
                Inactivos++;
            }
            Linea = leerArchivo.readLine();
            NoRegistros++;
        }
        

        Leer.close();
        leerArchivo.close();
        
        
        Descriptor_ListaUsuarioIndizada Nuevo = new Descriptor_ListaUsuarioIndizada("Lista Indizada",Fecha.toString(),Usuario,Fecha.toString(),Usuario,Comienzo,Integer.toString(NoRegistros),Integer.toString(Activos),Integer.toString(Inactivos));
        Acceso.DescriptorListaIndizada(Nuevo);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Modificacion_De_Listas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Modificacion_De_Listas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Modificacion_De_Listas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Modificacion_De_Listas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Modificacion_De_Listas().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> ComboBoxUsuarios;
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnRegresar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JLabel lblLista;
    private javax.swing.JList<String> lstUsuariosLista;
    private javax.swing.JTextField txtNombreUsuario;
    // End of variables declaration//GEN-END:variables
}
